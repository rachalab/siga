<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_requirements().
 */
function user_registrationpassword_requirements($phase) {
  $requirements = [];
  // Inform the user about incompatible modules.
  if ($phase == 'runtime') {
    $moduleHandler = \Drupal::service('module_handler');
    // Define incompatible modules.
    $incompatible_modules = [
      'logintoboggan',
      'username_enumeration_prevention',
    ];
    $modules_found = [];
    // Test for incompatible modules.
    foreach ($incompatible_modules as $module) {
      if ($moduleHandler->moduleExists($module)) {
        $modules_found[] = $module;
      }
    }
    // Report any issues.
    if (!empty($modules_found)) {
      $modules_found_string = implode(', ', $modules_found);
      $requirements['incompatible_modules'] = [
        'title' => t('Incompatible modules'),
        'value' => t('Your installation contains incompatible modules'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('The following modules are not compatible with user_registrationpassword: @modules', ['@modules' => $modules_found_string]),
      ];
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function user_registrationpassword_install() {
  // Set the correct default configuration settings so the module needs no more
  // configuration.
  //
  // Load configurations.
  $user_config = \Drupal::configFactory()->getEditable('user.settings');
  $user_mail_config = \Drupal::configFactory()->getEditable('user.mail');
  $mail_original_config = \Drupal::configFactory()->getEditable('user_registrationpassword.mail_original');

  $user_config
    // Enable account registration without email confirmation / admin approval.
    ->set('register', UserInterface::REGISTER_VISITORS)
    // Disable email verification.
    ->set('verify_mail', 0)
    // Prevent standard notification email to administrators and to user.
    ->set('notify.register_pending_approval', 0)
    ->set('notify.register_no_approval_required', 0)
    ->save();

  // Save the original activation email template to a variable, so we can revive
  // them when we uninstall the module.
  $mail_original_config
    ->set('status_activated.subject', $user_mail_config->get('status_activated.subject'))
    ->set('status_activated.body', $user_mail_config->get('status_activated.body'))
    ->save();

  // Set basic email template variable for the account activation email so it
  // makes sense.
  $user_mail_config
    ->set('status_activated.subject', 'Account details for [user:display-name] at [site:name]')
    ->set('status_activated.body', '[user:display-name],

Your account at [site:name] has been activated.

You will be able to log in to [site:login-url] in the future using:

username: [user:name]
password: your password.

-- [site:name] team')
    ->save();
}

/**
 * Implements hook_uninstall().
 */
function user_registrationpassword_uninstall() {
  // Load configurations.
  $user_config = \Drupal::configFactory()->getEditable('user.settings');
  $user_mail_config = \Drupal::configFactory()->getEditable('user.mail');
  $mail_original_config = \Drupal::configFactory()->getEditable('user_registrationpassword.mail_original');

  // Reset system variables back to save defaults.
  $user_config
    ->set('register', UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)
    ->set('verify_mail', 1)
    ->set('notify.register_pending_approval', 1)
    ->set('notify.register_no_approval_required', 1)
    ->save();

  // Load original stored activation mail variables.
  $original_subject = $mail_original_config->get('status_activated.subject');
  $original_body = $mail_original_config->get('status_activated.body');

  // Reset the stored activation mail template if available.
  if (!empty($original_subject) && !empty($original_subject)) {
    $user_mail_config
      ->set('status_activated.subject', $original_subject)
      ->set('status_activated.body', $original_body)
      ->save();
  }
}

/**
 * Set new notify to enable.
 */
function user_registrationpassword_update_8201() {
  $config = \Drupal::configFactory()->getEditable('user_registrationpassword.settings');
  $config->set('notify.register_confirmation_with_pass', 1)->save();
}

/**
 * Convert redirect configuration from route to simple URL string.
 */
function user_registrationpassword_update_9201() {
  $config = \Drupal::configFactory()->getEditable('user_registrationpassword.settings');
  $route_name = $config->get('registration_redirect.route_name');
  if (!empty($route_name)) {
    $route_parameters = $config->get('registration_redirect.route_parameters') ?: [];
    $redirect_url = Url::fromRoute($route_name, $route_parameters)->toString();
    // We need to strip out '/update.php' form the URL.
    $redirect_url = str_replace('/update.php', '', $redirect_url);
    $config->set('registration_redirect', $redirect_url);
    $config->save();
  }
}
