<?php

/**
 * @file
 * Provides validation for fields based on Workflow states.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\workflow\Entity\Workflow;
use Drupal\node\Entity\Node;
use Drupal\Core\Messenger\MessengerInterface;

use Drupal\Core\Entity\EntityStorageException;
use Drupal\field\Entity\FieldConfig;





/**
 * Validación personalizada para el formulario de edición de nodos.
 */
function field_workflow_validation_node_form_validate(array &$form, FormStateInterface $form_state) {

    // Obtener el valor del estado del Workflow desde el formulario.
    $workflow_state = $form_state->getValue('field_organization_status')[0]['value'] ?? NULL;
   // $workflow_state= $form_state->getValue('_workflow_transition')->getToState()->id();
    if ($workflow_state) {
      // Obtener el tipo de contenido desde el formulario.
      $node_type = $form_state->getFormObject()->getEntity()->bundle();

      // Cargar definiciones de campos para el bundle del nodo.
      $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node_type);
  
      foreach ($field_definitions as $field_name => $field_definition) {
        // Verificar que el campo sea configurable.
        if ($field_definition instanceof FieldConfig) {
          // Obtener los estados requeridos configurados para este campo.
          $required_states = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);
          if (in_array($workflow_state, $required_states, TRUE) || 1) {
            // Obtener el valor del campo desde el formulario.
            $field_value = $form_state->getValue($field_name);
  
            // Validar si el campo está vacío.
            if (field_workflow_validation_is_empty($field_value)) {
              // Agregar un mensaje de error para el campo.
              $form_state->setErrorByName($field_name, t('El campo "%field" es obligatorio cuando el nodo está en el estado "%state".', [
                '%field' => $field_definition->getLabel(),
                '%state' => $workflow_state,
              ]));
            }
          }
        }
      }
    }
  }
  
  /**
   * Verifica si un valor de campo está vacío.
   *
   * @param mixed $field_value
   *   El valor del campo.
   *
   * @return bool
   *   TRUE si el campo está vacío, FALSE en caso contrario.
   */
  function field_workflow_validation_is_empty($field_value) {
    if (empty($field_value)) {
      return TRUE;
    }
    
    // Si es un array, verificar subcampos como "value", "target_id", "uri", etc.
    if (is_array($field_value)) {
      foreach ($field_value as $item) {
        if (is_array($item)) {
          // Verifica si hay al menos un valor significativo en subparámetros.
          if (!empty($item['phone'])  || !empty($item['address'])  || !empty($item['value']) || !empty($item['target_id']) || !empty($item['uri'])) {
            return FALSE;
          }
        }
        else {
          // Si no es un array, verifica directamente.
          if (!empty($item)) {
            return FALSE;
          }
        }
      }
      return TRUE;
    }
  
    // Si no es array y está vacío, retorna TRUE.
    return empty($field_value);
  }
/**
 * Implements hook_form_alter().
 */
function field_workflow_validation_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Registrar el form_id en los logs para depuración.

    //REVISAR
  if (($form_id === 'node_form' || strpos($form_id, 'node_') === 0) && $form_id != 'node_type_edit_form'  && $form_id != 'node_delete_multiple_confirm_form') {


    $form['#validate'][] = 'field_workflow_validation_node_form_validate';

    // Obtener la entidad del formulario.
    $node = $form_state->getFormObject()->getEntity();

    if ($node->hasField('field_organization_status') && !$node->get('field_organization_status')->isEmpty()) {
      $current_state = $node->get('field_organization_status')->value;

      // Obtener las definiciones de campos para el tipo de contenido del nodo.
      $node_type = $node->bundle();
      $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node_type);

      foreach ($field_definitions as $field_name => $field_definition) {
        // Verificar si es una instancia de FieldConfig para evitar errores.
        if ($field_definition instanceof FieldConfig) {
          $required_states = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);

          // Verificar si el campo referencia Paragraphs.
          $is_paragraph_reference = $field_definition->getType() === 'entity_reference_revisions' &&
                                    $field_definition->getSetting('target_type') === 'paragraph';

          if (in_array($current_state, $required_states, TRUE) || $is_paragraph_reference) {
            // Marcar el campo como obligatorio en el formulario.
            if (isset($form[$field_name])) {
              process_field_widgets($form[$field_name]['widget'], $current_state);
            }
          }
        }
      }
    }
  }


  // Verifica si el formulario es de configuración de widget de campo.
  if (strpos($form_id, 'field_config_edit_form') !== FALSE) {
        // Verificar que el formulario tiene una entidad de campo.
        $field_definition = $form_state->getFormObject()->getEntity();
        
        if ($field_definition instanceof \Drupal\field\Entity\FieldConfig) {
          // Cargar los estados del Workflow.
          $workflows = \Drupal\workflow\Entity\Workflow::loadMultiple();
          $options = [];
          foreach ($workflows as $workflow_id => $workflow) {
            foreach ($workflow->states as $state_id => $state_config) {
              $options[$state_id] = $workflow_id . ": " . $state_config->label();
            }
          }
      
          // Obtener los valores existentes guardados en "Third Party Settings".
          $default_values = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);
      
          // Convertir los valores guardados a un formato compatible con checkboxes.
          if (is_array($default_values)) {
            $default_values = array_combine($default_values, $default_values);
          }
      
          // Agregar configuración personalizada al formulario.
          $form['third_party_settings']['field_workflow_validation']['required_states'] = [
            '#type' => 'checkboxes',
            '#title' => t('Make this field required for the following Workflow states'),
            '#options' => $options,
            '#default_value' => $default_values,
          ];
      
          // Registrar el submit handler.
          $form['actions']['submit']['#submit'][] = 'field_workflow_validation_field_config_edit_form_submit';
        }
      
  }
}


/**
 * Procesa recursivamente los widgets de los campos, incluyendo `Paragraphs`.
 */
function process_field_widgets(array &$widgets, $current_state) {
  foreach ($widgets as $key => &$widget) {
    if (is_array($widget)) {
      // Marcar el widget como requerido si aplica.
      if (isset($widget['#type']) || isset($widget['#required'])) {
        $widget['#required'] = TRUE;

        
      }

      // Si existe un subcampo llamado 'value', marcarlo como requerido.
      if (isset($widget['value']) && is_array($widget['value'])) {
        $widget['value']['#required'] = TRUE;

        
      }
      if (isset($widget['uri']) && is_array($widget['uri'])) {
        $widget['uri']['#required'] = TRUE;

       
      }
      

      // Si el widget tiene un tipo de párrafo definido, procesar sus campos.
      if (isset($widget['#paragraph_type'])) {
        $paragraph_type = $widget['#paragraph_type'];

        // Obtener las definiciones de campos para el bundle del Paragraph.
        $paragraph_field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('paragraph', $paragraph_type);

        foreach ($paragraph_field_definitions as $field_name => $field_definition) {
          if ($field_definition instanceof FieldConfig) {
            $required_states = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);
  
            // Verificar si el campo referencia Paragraphs.
            $is_paragraph_reference = $field_definition->getType() === 'entity_reference_revisions' &&
            $field_definition->getSetting('target_type') === 'paragraph';

            // Procesar los campos del Paragraph si son requeridos o si es un Paragraph.
            if (in_array($current_state, $required_states, TRUE) || $is_paragraph_reference) {
              if (isset($widget['subform'][$field_name])) {

                if(in_array($current_state, $required_states, TRUE))
                {
                  $widget['subform'][$field_name]['widget']['#required'] = true;
                }
                
                process_field_widgets($widget['subform'][$field_name]['widget'], $current_state);
              }
            }
          }
        }
      }
    }
  }
}
/**
 * Implements hook_field_widget_settings_validate().
 */
function field_workflow_validation_field_widget_settings_validate(array &$form, FormStateInterface $form_state, array $context) {
  // Validar los valores de configuración, si es necesario.
  $values = $form_state->getValue(['third_party_settings', 'field_workflow_validation', 'required_states']);
  if (!is_array($values)) {
    $form_state->setErrorByName('required_states', t('Invalid configuration for Workflow required states.'));
  }
}

/**
 * Implements hook_field_widget_settings_submit().
 */
function field_workflow_validation_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {
   
    // Obtener la entidad del campo.
    $field_definition = $form_state->getFormObject()->getEntity();
  
    // Obtener los valores seleccionados del formulario.
    $values = $form_state->getValue(['third_party_settings', 'field_workflow_validation', 'required_states']);
  
    if (is_array($values)) {
      // Filtrar valores vacíos o no seleccionados.
      $values = array_filter($values, function ($value) {
        return $value !== 0 && $value !== NULL;
      });
    }
  
    // Guardar los valores en la configuración de terceros del campo.
    $field_definition->setThirdPartySetting('field_workflow_validation', 'required_states', $values);
  
    // Guardar la entidad del campo.
    $field_definition->save();
  }

  /**
 * Valida un nodo existente para verificar campos requeridos según un nuevo estado del Workflow.
 * Incluye validación recursiva para campos de tipo Paragraph.
 *
 * @param \Drupal\node\Entity\Node $node
 *   El nodo que se desea validar.
 * @param string $new_state
 *   El ID del nuevo estado del Workflow al que se desea transitar.
 *
 * @return array|bool
 *   Devuelve false si todos los campos están completos. Si faltan campos, devuelve un array con los nombres de los campos incompletos.
 */
function validate_node_required_fields_by_workflow_state(Node $node, $new_state) {
  $errors = [];

  // Obtener el tipo de contenido del nodo.
  $node_type = $node->bundle();

  // Obtener las definiciones de campos para este tipo de contenido.
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node_type);

  foreach ($field_definitions as $field_name => $field_definition) {
    // Verificar si el campo es configurable.
    if ($field_definition instanceof FieldConfig) {
      // Obtener los estados requeridos para este campo.
      $required_states = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);

      // Validar si el campo es obligatorio en el nuevo estado.
      if (in_array($new_state, $required_states, TRUE)) {
        $field_value = $node->get($field_name)->getValue();

        // Si el campo referencia Paragraphs, procesar recursivamente.
        if ($field_definition->getType() === 'entity_reference_revisions' &&
            $field_definition->getSetting('target_type') === 'paragraph') {

          $paragraph_errors = validate_paragraph_required_fields($field_value, $new_state, $field_definition->getLabel());
          $errors = array_merge($errors, $paragraph_errors);
        }
        // Validar si el campo está vacío.
        elseif (field_workflow_validation_is_empty($field_value)) {
          $errors[] = $field_definition->getLabel();
        }
      }
    }
  }

  return empty($errors) ? false : $errors;
}

/**
 * Valida recursivamente campos requeridos en entidades de tipo Paragraph.
 *
 * @param array $paragraphs
 *   Array de entidades Paragraph referenciadas.
 * @param string $new_state
 *   El ID del nuevo estado del Workflow al que se desea transitar.
 * @param string $breadcrumb
 *   El breadcrumb que lleva el contexto de los campos (nombre del padre actual).
 *
 * @return array
 *   Un array con los nombres de los campos incompletos, incluyendo breadcrumb para contextos de Paragraphs.
 */
function validate_paragraph_required_fields(array $paragraphs, $new_state, $breadcrumb) {
  $errors = [];

  foreach ($paragraphs as $paragraph_reference) {
    // Cargar la entidad Paragraph.
    $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_reference['target_id']);

    if ($paragraph) {
      $paragraph_type = $paragraph->bundle();

      // Obtener las definiciones de campos para el tipo de Paragraph.
      $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('paragraph', $paragraph_type);

      foreach ($field_definitions as $field_name => $field_definition) {
        if ($field_definition instanceof FieldConfig) {
          $required_states = $field_definition->getThirdPartySetting('field_workflow_validation', 'required_states', []);

          // Validar si el campo es obligatorio en el nuevo estado.
          if (in_array($new_state, $required_states, TRUE)) {
            $field_value = $paragraph->get($field_name)->getValue();

            // Si el campo referencia Paragraphs, procesar recursivamente.
            if ($field_definition->getType() === 'entity_reference_revisions' &&
                $field_definition->getSetting('target_type') === 'paragraph') {

              $nested_errors = validate_paragraph_required_fields($field_value, $new_state, $breadcrumb . ' > ' . $field_definition->getLabel());
              $errors = array_merge($errors, $nested_errors);
            }
            // Validar si el campo está vacío.
            elseif (field_workflow_validation_is_empty($field_value)) {
              $errors[] = $breadcrumb . ' > ' . $field_definition->getLabel();
            }
          }
        }
      }
    }
  }

  return $errors;
}
